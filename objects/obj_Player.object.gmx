<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_Player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0;
vsp = 0;
grv = 0.3;
walksp = 4;

controller = 0;
hascontrol = true;
canjump = 0;

gunkickx = 0;
gunkicky = 0;

flash = 0;
phitpoints = 5;
global.pinvulnerability = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pinvulnerability = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Getting player input

if (hascontrol)
    {
    key_left = keyboard_check(ord("A")) || keyboard_check(vk_left);
    key_right = keyboard_check(ord("D")) || keyboard_check(vk_right);
    key_jump = keyboard_check_pressed(vk_space);
    
    // Input with a gamepad
    
    if (key_left) || (key_right) || (key_jump)
        {
        controller = 0;
        }
    
    if (abs(gamepad_axis_value(0, gp_axislh)) &gt; 0.2)
        {
        key_left = abs(min(gamepad_axis_value(0, gp_axislh), 0));
        key_right = max(gamepad_axis_value(0, gp_axislh), 0);
        controller = 1;
        }
    
    if (gamepad_button_check_pressed(0, gp_face1))
        {
        key_jump = 1;
        controller = 1;
        }
    }
    
else
    {
    key_right = 0;
    key_left = 0;
    key_jump = 0;
    }
    
// Calculating movement
var move = key_right - key_left;

hsp = (move * walksp) + gunkickx;
gunkickx = 0;

vsp = (vsp + grv) + gunkicky;
gunkicky = 0;

// Jumping
canjump -= 1;
if (canjump &gt; 0) &amp;&amp; (key_jump)
    {
    vsp = -7;
    canjump = 0;
    audio_play_sound(snd_Jump, 4, false);
    }

// Horizontal collision
if (place_meeting(x + hsp, y, obj_IndustrialWall))
    {
    while (!place_meeting(x + sign(hsp), y, obj_IndustrialWall))
        {
        x = x + sign(hsp);
        }
    hsp = 0;
    }

x = x + hsp;

// Vertical collision
if (place_meeting(x, y + vsp, obj_IndustrialWall))
    {
    while (!place_meeting(x, y + sign(vsp), obj_IndustrialWall))
        {
        y = y + sign(vsp);
        }
    vsp = 0;
    }

y = y + vsp;

// Animations
var aimside = sign(mouse_x - x);
if (aimside != 0) image_xscale = aimside;

if (!place_meeting(x, y + 1, obj_IndustrialWall))
    {
    sprite_index = spr_PlayerJump;
    image_speed = 0;
    if (sign(vsp) &gt; 0) image_index = 1; else image_index = 0;
    }
else
    {
    canjump = 9;
    if (sprite_index == spr_PlayerJump)
        {
        audio_sound_pitch(snd_Landing, choose(0.9, 1.0, 1.2));
        audio_play_sound(snd_Landing, 4, false);
        repeat(6)
            {
            with (instance_create(x, bbox_bottom, obj_Dust))
                {
                vsp = 0;
                }
            }
        }
    image_speed = 1;
    if (hsp == 0)
        {
        sprite_index = spr_Player;
        }
    else
        {
        sprite_index = spr_PlayerRun;
        if (aimside != sign(hsp)) sprite_index = spr_PlayerRunB;
        }
    }
    
/// Background parallax scrolling base, the last one, being 7 (seven), should always be
/// unscrollable
background_x[0] = view_xview / 1.2;
background_x[1] = view_xview / 1.3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_EnemyBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phitpoints &gt; 0)
    {
    phitpoints--;
    flash = 3;
    instance_destroy(other);
    }
if (phitpoints == 0)
    {
    scr_kill_player();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_UCrazedAgent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pinvulnerability = false)
    {
    if (phitpoints &gt; 0)
        {
        phitpoints--;
        flash = 3;
        global.pinvulnerability = true;
        alarm_set(0, 60);
        }
    if (phitpoints == 0)
        {
        scr_kill_player();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_CrazedAgent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phitpoints &gt; 0)
    {
    phitpoints--;
    }
else
    {
    scr_kill_player();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Convict">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phitpoints &gt; 0)
    {
    phitpoints--;
    }
else
    {
    scr_kill_player();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footsteps
if (sprite_index == spr_PlayerRun)
    {
    audio_sound_pitch(snd_Step1, choose(0.9, 1.0, 1.1));
    audio_sound_pitch(snd_Step2, choose(0.9, 1.0, 1.1));
    audio_sound_pitch(snd_Step3, choose(0.9, 1.0, 1.1));
    audio_play_sound(choose(snd_Step1, snd_Step2, snd_Step3), 1, false);
    }
    
if (sprite_index == spr_PlayerRunB)
    {
    audio_sound_pitch(snd_Step1, choose(0.9, 1.0, 1.1));
    audio_sound_pitch(snd_Step2, choose(0.9, 1.0, 1.1));
    audio_sound_pitch(snd_Step3, choose(0.9, 1.0, 1.1));
    audio_play_sound(choose(snd_Step1, snd_Step2, snd_Step3), 1, false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Autosave

// Overwrite old save
if (file_exists(SAVEFILE))
    {
    file_delete(SAVEFILE);
    }

// Create a new save
var file;
file = file_text_open_write(SAVEFILE);
file_text_write_real(file, room);
file_text_write_real(file, global.candies);
file_text_write_real(file, global.hasgun);
file_text_close(file);

if (!audio_is_playing(music_Demo))
    {
    audio_play_sound(music_Demo, 100, true);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw and flashing
draw_self();

if (flash &gt; 0)
    {
    flash--;
    shader_set(sha_White);
    draw_self();
    shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
